@page "/Alerts"
@using BlazorFrontend.Services
@using BlazorFrontend.Entities

@inject ILogger<Alerts> Logger;
@inject ISnackbar Snackbar;
@inject AlertsService AlertsService;

<MudContainer Style="margin-top: 30px;">
    <MudTable Items="@Data" Loading="Loading" CustomHeader="true">
        <HeaderContent>
            <MudTHeadRow>
                <MudTh colspan="2" Style="text-align: right">
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Refresh" Color="Color.Primary" @onclick="LoadData">Reload data</MudButton>
                </MudTh>
            </MudTHeadRow>
            <MudTHeadRow>
                <MudTh>Level</MudTh>
                <MudTh>Raised at</MudTh>
            </MudTHeadRow>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudChip Size="Size.Small" Color="GetAlertLevelColor(context.Level)">@context.Level</MudChip>
            </MudTd>
            <MudTd>@context.RaisedAt</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No data to display...</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private IEnumerable<Alert> Data { get; set; } = Array.Empty<Alert>();
    private bool Loading { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            Loading = true;
            Data = await AlertsService.LoadAlertsAsync() ?? Array.Empty<Alert>();
        }
        catch (Exception e)
        {
            Logger.LogError(e.Message);
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Add("An error occured while loading data", Severity.Error);
        }
        finally
        {
            Loading = false;
        }
    }

    private static Color GetAlertLevelColor(AlertLevel level) => level switch
    {
        AlertLevel.Low => Color.Info,
        AlertLevel.Medium => Color.Warning,
        AlertLevel.High => Color.Error,
        AlertLevel.VeryHigh => Color.Error,
        _ => Color.Default
    };
}